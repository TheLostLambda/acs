;;;; This file contains the code for the program interface.

(ql:quickload :cl-ppcre)
(ql:quickload :cl-dbi)
(ql:quickload :quri)
(load "util.lisp")
(load "adb.lisp")
(load "db.lisp")
(load "gen.lisp")

(defparameter *VERSION-STRING* "v1.0.1" "The version information for the program.")
(defparameter *output-dir* nil "This is the directory in which the final report will be written and the media pulled.")

(defun conversations ()
  "Lists the conversations present in the database in an easy-to-read, numbered list."
  (db-connect)
  (mapc (lambda (convo) (format t "(~A)~5t~A~%" (car convo) (cdr convo))) (list-conversations))
  (db-free))

(defun mk-report (convo path &optional start end)
  "Fetches the messages from a conversation and pulls the media before generating the html report."
  (db-connect)
  (if (uiop:absolute-pathname-p path)
      (setf *output-dir* (absolute-path path))
      (setf *output-dir* (relative-path path)))
  (let ((msgs (list-messages convo start end))
	(convo-name (lookup convo (list-conversations))))
    (mapc #'adb-fetch-media msgs)
    (write-to-file (gen-report convo-name msgs)))
  (db-free))

(defun cli ()
  "Interactively works with the user to generate a report."
  (let ((options '()))
    (format t "Allo Conversation Scraper (ACS) ~A~%~%" *VERSION-STRING*)
    (format t "Please connect the rooted android device containing the Allo conversations to be archived, then press ENTER.~%")
    (read-line)
    (adb-pull-database)
    (format t "~%Please leave the device attached for the duration of the archiving process.~%~%")
    (format t "To begin, enter the number of the conversation that you would like to archive.~%~%")
    (conversations)
    (terpri)
    (push (cons :id (get-typed-input 'integer "Conversation ID")) options)
    (format t "~%Would you like to archive the whole conversation?~%")
    (when (equalp "N" (get-typed-input 'string "(Y/N)"))
      (format t "~%Please enter a time range in the format YYYY.MM.DD (HH:MM:SS).~%")
      (format t "Note that while providing the year, month, and day are required, the time components are optional.~%")
      (push (cons :start (get-typed-input 'string "Start time")) options)
      (push (cons :end (get-typed-input 'optional "End time (optional)")) options))
    (format t "~%Finally, please enter a directory in which to save the report.~%")
    (push (cons :path (get-typed-input 'string "Output directory")) options)
    (format t "~%Generating archive...~%")
    (mk-report (lookup :id options) (lookup :path options) (lookup :start options) (lookup :end options))
    (format t "~%Archive generated at ~A.~%" (uiop:truenamize (lookup :path options)))
    (format t "You may now safely disconnect the Android device.~%")))

(defun get-typed-input (type prompt)
  "Takes a data type and prompt text then reads and validates input from the user. If the input doesn't validate as the type given, reprompt the user."
  (format t "~A: " prompt)
  (finish-output)
  (let ((in (read-line)))
    (cond ((eq type 'optional) (ensure-string-content in))
          ((and (eq type 'string) (ensure-string-content in)) in)
	  ((eq type 'integer) (handler-case (parse-integer in) (error () (get-typed-input type prompt))))
	  (t (get-typed-input type prompt)))))

(defun main ()
  "Wraps the main cli and gracefully handles Ctrl-C interrupts."
  (handler-case (cli)
    (sb-sys:interactive-interrupt ()
      (sb-ext:quit))))
